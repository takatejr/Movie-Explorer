{"version":3,"sources":["components/modules/MovieExplorer/MovieExplorerButton.tsx","components/modules/MovieExplorer/MovieExplorerInput.tsx","components/modules/MovieExplorer/MovieExplorerItem.tsx","hooks/usePagination.tsx","components/modules/MovieExplorer/MovieExplorerPagination.tsx","components/modules/MovieExplorer/MovieExplorerList.tsx","utils/const.tsx","utils/FetchData.tsx","hooks/useToggle.tsx","pages/MovieExplorer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledButton","styled","button","MovieExplorerButton","memo","text","onClick","ariaLabel","aria-label","displayName","InputContainer","div","MovieExplorerInput","handleChange","title","htmlFor","type","defaultValue","onChange","placeholder","required","StyledMovie","StyledInfo","StyledTitle","p","StyledYear","MovieExplorerItem","img","year","src","alt","usePagination","currentPageNumber","paginationPagesNumber","useState","currentPage","setCurrentPage","pageNumbers","i","push","page","lastPage","length","prevPage","nextPage","firstPage","StyledPagination","CurrentButton","MovieExplorerPagination","paginate","toggle","value","e","Number","currentTarget","StyledMovies","MovieExplorerList","movies","isLoading","map","Title","Poster","Year","imdbID","fetchMovies","console","log","fetch","process","method","mode","then","res","json","Search","undefined","useToggle","boolean","setState","useCallback","state","StyledForm","form","StyledSection","section","MovieExplorer","currentTitle","setCurrentTitle","paginationTitle","setPaginationTitle","Type","Movies","setCollectionMovies","getMovies","a","handleSearchMovie","event","preventDefault","parseInt","innerHTML","isPage","isNaN","handleChangeTitle","onSubmit","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa37a634.chunk.js","sourcesContent":["import { memo, MouseEventHandler } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ntype ButtonProps = {\r\n  readonly text: string;\r\n  readonly onClick: MouseEventHandler<HTMLButtonElement>;\r\n  readonly ariaLabel: string;\r\n};\r\n\r\nconst StyledButton = styled.button`\r\n  height: 3vh;\r\n  width: 50%;\r\n  color: rgba(40, 40, 40, 0.7);\r\n  margin: 1%;\r\n  border: 2px solid rgba(100, 200, 50, 0.7);\r\n  border-radius: 3px;\r\n\r\n  &:active {\r\n    background-color: rgba(100, 200, 50, 0.5);\r\n  }\r\n`;\r\n\r\nexport const MovieExplorerButton = memo<ButtonProps>(\r\n  ({ text, onClick, ariaLabel }) => {\r\n    return (\r\n      <StyledButton onClick={onClick} aria-label={ariaLabel}>\r\n        {text}\r\n      </StyledButton>\r\n    );\r\n  },\r\n);\r\n\r\nMovieExplorerButton.displayName = \"MovieExplorerButton\";\r\n","import React, { FormEventHandler, memo } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ntype InputProps = {\r\n  readonly handleChange: FormEventHandler<HTMLInputElement>;\r\n  readonly title: string;\r\n  readonly text: string;\r\n};\r\n\r\nconst InputContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 2%;\r\n  padding: 5vh 0 1vh;\r\n\r\n  & > input {\r\n    border: 1px solid rgba(100, 170, 50, 0.7);\r\n    border-radius: 0.25rem;\r\n    background-color: transparent;\r\n    outline: none;\r\n    padding: 2%;\r\n    transition: all 0.2s ease;\r\n    z-index: 500;\r\n  }\r\n  & > label {\r\n    color: #757575;\r\n    font-size: 1.8rem;\r\n    transition: all 0.2s ease;\r\n    margin: 2%;\r\n    z-index: 500;\r\n  }\r\n`;\r\n\r\nexport const MovieExplorerInput = memo<InputProps>(\r\n  ({ handleChange, title, text }) => {\r\n    return (\r\n      <InputContainer>\r\n        <label htmlFor=\"MovieTitle\">Movie Explorer</label>\r\n        <input\r\n          type=\"text\"\r\n          defaultValue={title}\r\n          onChange={handleChange}\r\n          placeholder={text}\r\n          aria-label={text}\r\n          required\r\n        />\r\n      </InputContainer>\r\n    );\r\n  },\r\n);\r\n\r\nMovieExplorerInput.displayName = \"MovieExplorerInput\";\r\n","import { memo } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ntype MovieExplorerItemProps = {\r\n  readonly title: string;\r\n  readonly img: string;\r\n  readonly year: string;\r\n};\r\n\r\nconst StyledMovie = styled.div`\r\n  background-color: rgba(200, 200, 100, 0.5);\r\n  border: 1px solid #a1b1c1;\r\n  margin: 3% 1%;\r\n  order: 1;\r\n`;\r\n\r\nconst StyledInfo = styled.div`\r\n  margin: 1%;\r\n`;\r\n\r\nconst StyledTitle = styled.p`\r\n  font-size: 16px;\r\n  border-bottom: 1px solid #114111;\r\n  margin: 1%;\r\n`;\r\n\r\nconst StyledYear = styled.p`\r\n  margin: 1%;\r\n  font-size: 12px;\r\n`;\r\n\r\nexport const MovieExplorerItem = memo<MovieExplorerItemProps>(\r\n  ({ title, img, year}) => {\r\n    return (\r\n      <StyledMovie>\r\n        <img src={img} alt={title} />\r\n        <StyledInfo>\r\n          <StyledTitle>{title}</StyledTitle>\r\n          <StyledYear>({year})</StyledYear>\r\n        </StyledInfo>\r\n      </StyledMovie>\r\n    );\r\n  },\r\n);\r\n\r\nMovieExplorerItem.displayName = \"MovieExplorerList\";\r\n","import { useState } from \"react\";\r\n\r\nexport const usePagination = (\r\n  currentPageNumber: number,\r\n  paginationPagesNumber: number,\r\n) => {\r\n  const [currentPage, setCurrentPage] = useState(() => currentPageNumber);\r\n  const [paginationPages] = useState(() => {\r\n    const pageNumbers = [];\r\n\r\n    for (let i = 1; i <= paginationPagesNumber; i++) {\r\n      pageNumbers.push({ page: i });\r\n    }\r\n\r\n    return pageNumbers;\r\n  });\r\n\r\n  const firstPage = 1;\r\n  const lastPage = paginationPages.length;\r\n  const prevPage = currentPage === 1 ? 1 : currentPage - 1;\r\n  const nextPage = currentPage === lastPage ? lastPage : currentPage + 1;\r\n\r\n  return {\r\n    currentPage,\r\n    prevPage,\r\n    nextPage,\r\n    firstPage,\r\n    lastPage,\r\n    setCurrentPage,\r\n  };\r\n};\r\n\r\nexport default usePagination;\r\n","import { memo, MouseEventHandler } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport usePagination from \"../../../hooks/usePagination\";\r\n\r\ntype MovieExplorerPaginationProps = {\r\n  readonly paginate: MouseEventHandler<HTMLButtonElement>;\r\n  readonly toggle: () => void;\r\n};\r\n\r\nconst StyledPagination = styled.div`\r\n  width: 70vw;\r\n  margin: 3% auto;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  margin: 0;\r\n  width: 15%;\r\n  color: rgba(40, 40, 40, 0.7);\r\n  margin: 0.1%;\r\n  border: 2px solid rgba(100, 200, 50, 0.7);\r\n  border-radius: 3px;\r\n\r\n  &:active {\r\n    background-color: rgba(100, 200, 50, 0.5);\r\n  }\r\n`;\r\n\r\nconst CurrentButton = styled.button`\r\n  margin: 0.1%;\r\n  width: 15%;\r\n  background-color: rgba(30, 200, 50, 1);\r\n  border: 2px solid rgba(100, 200, 50, 0.7);\r\n  border-radius: 3px;\r\n\r\n  &:active {\r\n    background-color: rgba(100, 200, 50, 0.5);\r\n  }\r\n`;\r\n\r\nexport const MovieExplorerPagination = memo<MovieExplorerPaginationProps>(\r\n  ({ paginate, toggle }) => {\r\n    const {\r\n      currentPage,\r\n      prevPage,\r\n      nextPage,\r\n      firstPage,\r\n      lastPage,\r\n      setCurrentPage,\r\n    } = usePagination(2, 100);\r\n\r\n    return (\r\n      <StyledPagination>\r\n        {firstPage === prevPage ? null : (\r\n          <StyledButton\r\n            value={firstPage}\r\n            onClick={(e) => {\r\n              setCurrentPage(Number(e.currentTarget.value));\r\n              paginate(e);\r\n              toggle();\r\n            }}\r\n          >\r\n            {firstPage}\r\n          </StyledButton>\r\n        )}\r\n        {prevPage === currentPage ? null : (\r\n          <StyledButton\r\n            value={prevPage}\r\n            onClick={(e) => {\r\n              setCurrentPage(Number(e.currentTarget.value));\r\n              paginate(e);\r\n              toggle();\r\n            }}\r\n          >\r\n            {prevPage}\r\n          </StyledButton>\r\n        )}\r\n        {firstPage === currentPage || lastPage === currentPage ? (\r\n          <CurrentButton\r\n            value={currentPage}\r\n            onClick={(e) => {\r\n              setCurrentPage(Number(e.currentTarget.value));\r\n              paginate(e);\r\n              toggle();\r\n            }}\r\n          >\r\n            {currentPage}\r\n          </CurrentButton>\r\n        ) : (\r\n          <CurrentButton\r\n            value={currentPage}\r\n            onClick={(e) => {\r\n              setCurrentPage(Number(e.currentTarget.value));\r\n              paginate(e);\r\n              toggle();\r\n            }}\r\n          >\r\n            {currentPage}\r\n          </CurrentButton>\r\n        )}\r\n        {nextPage === lastPage ? null : (\r\n          <StyledButton\r\n            value={nextPage}\r\n            onClick={(e) => {\r\n              setCurrentPage(Number(e.currentTarget.value));\r\n              paginate(e);\r\n              toggle();\r\n            }}\r\n          >\r\n            {nextPage}\r\n          </StyledButton>\r\n        )}\r\n        {currentPage === lastPage ? null : (\r\n          <StyledButton\r\n            value={lastPage}\r\n            onClick={(e) => {\r\n              setCurrentPage(Number(e.currentTarget.value));\r\n              paginate(e);\r\n              toggle();\r\n            }}\r\n          >\r\n            {lastPage}\r\n          </StyledButton>\r\n        )}\r\n      </StyledPagination>\r\n    );\r\n  },\r\n);\r\n\r\nMovieExplorerPagination.displayName = \"MovieExplorerPagination\";\r\n","import React, { memo, MouseEventHandler } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Movie } from \"../../../pages/MovieExplorer\";\r\nimport { MovieExplorerItem } from \"./MovieExplorerItem\";\r\nimport { MovieExplorerPagination } from \"./MovieExplorerPagination\";\r\n\r\ntype MovieExplorerListProps = {\r\n  readonly movies: Movie[];\r\n  readonly paginate: MouseEventHandler<HTMLButtonElement>;\r\n  readonly isLoading: boolean;\r\n  readonly toggle: () => void;\r\n};\r\n\r\nconst StyledMovies = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const MovieExplorerList = memo<MovieExplorerListProps>(\r\n  ({ movies, paginate, isLoading, toggle }) => {\r\n    return (\r\n      <div>\r\n        {movies.length === 1 ? null : isLoading ? (\r\n          <p>Data is fetching</p>\r\n        ) : (\r\n          <StyledMovies>\r\n            {movies.map(({ Title, Poster, Year, imdbID }) => (\r\n              <MovieExplorerItem\r\n                title={Title}\r\n                img={Poster}\r\n                year={Year}\r\n                key={imdbID + Title}\r\n              />\r\n            ))}\r\n            <MovieExplorerPagination paginate={paginate} toggle={toggle} />\r\n          </StyledMovies>\r\n        )}\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nMovieExplorerList.displayName = \"MovieExplorerList\";\r\n","export const API_KEY = process.env.REACT_APP_API_KEY;\r\nexport const API_URL = process.env.REACT_APP_API_URL;","import { API_KEY, API_URL } from \"./const\";\r\n\r\nexport const fetchMovies = (title: string, currentPage: number) => {\r\n  console.log('seg')\r\n  return fetch(`${API_URL}?apikey=${API_KEY}&s=${title}&page=${currentPage}`, {\r\n    method: \"GET\",\r\n    mode: \"cors\",\r\n  })\r\n    .then((res) => {\r\n      if (!res) return;\r\n      return res.json();\r\n    })\r\n    .then(({ Search }) => {\r\n      if (Search === undefined) return;\r\n      return Search;\r\n    });\r\n};\r\n\r\nfetchMovies.displayName = \"fetchMovies\";","import { useCallback, useState } from 'react';\r\n\r\nconst useToggle = (boolean: boolean) => {\r\n    const [isLoading, setState] = useState(boolean)\r\n    const toggle = useCallback(() => setState(state => !state), [])\r\n\r\n    return { isLoading, toggle }\r\n}\r\n\r\nexport default useToggle","import React, { FormEventHandler, useCallback, useState } from \"react\";\r\nimport { MovieExplorerButton } from \"../components/modules/MovieExplorer/MovieExplorerButton\";\r\nimport { MovieExplorerInput } from \"../components/modules/MovieExplorer/MovieExplorerInput\";\r\nimport { MovieExplorerList } from \"../components/modules/MovieExplorer/MovieExplorerList\";\r\nimport { fetchMovies } from \"../utils/FetchData\";\r\nimport useToggle from \"../hooks/useToggle\";\r\nimport styled from \"styled-components\";\r\n\r\nexport type Movie = {\r\n  readonly Poster: string;\r\n  readonly Title: string;\r\n  readonly Type: string;\r\n  readonly Year: string;\r\n  readonly imdbID: string;\r\n};\r\n\r\nconst StyledForm = styled.form`\r\n  height: 30vh;\r\n  width: 60vw;\r\n  margin: auto;\r\n`;\r\n\r\nconst StyledSection = styled.section`\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  height: 100%;\r\n  display: grid;\r\n  margin: auto;\r\n  justify-content: space-around;\r\n`;\r\n\r\nexport const MovieExplorer = () => {\r\n  const { isLoading, toggle } = useToggle(true);\r\n  const [currentTitle, setCurrentTitle] = useState<string>(\"\");\r\n  const [paginationTitle, setPaginationTitle] = useState(\"\");\r\n  const [Movies, setCollectionMovies] = useState<Movie[]>(() => [\r\n    {\r\n      Poster: \"\",\r\n      Title: \"\",\r\n      Type: \"\",\r\n      Year: \"\",\r\n      imdbID: \"\",\r\n    },\r\n  ]);\r\n\r\n  const getMovies = useCallback(\r\n    async (title, page) => {\r\n      return await fetchMovies(title, page).then((Movies: Movie[]) => {\r\n        if (Movies === undefined) return;\r\n        setCollectionMovies(Movies);\r\n      });\r\n    },\r\n    [],\r\n  );\r\n\r\n  const handleSearchMovie = useCallback<FormEventHandler<HTMLButtonElement | HTMLFormElement>>((event) => {\r\n      event.preventDefault();\r\n      const page = Number.parseInt(event.currentTarget.innerHTML, 10);\r\n      const isPage = isNaN(page)\r\n\r\n      if (isPage) {\r\n        setPaginationTitle(currentTitle);\r\n      }\r\n\r\n      const whichPage = isPage ? 1 : page;\r\n      const whichTitle = isPage ? currentTitle : paginationTitle;\r\n\r\n      getMovies(whichTitle, whichPage);\r\n    },\r\n    [currentTitle, getMovies, paginationTitle],\r\n  );\r\n\r\n  const handleChangeTitle = useCallback<FormEventHandler<HTMLInputElement>>((event) => {\r\n      const title = event.currentTarget.value;\r\n      setCurrentTitle(() => title);\r\n    },\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <StyledSection aria-label=\"MovieExplorer\">\r\n      <StyledForm onSubmit={handleSearchMovie}>\r\n        <MovieExplorerInput\r\n          title={currentTitle}\r\n          handleChange={handleChangeTitle}\r\n          text=\"Put movie title...\"\r\n        />\r\n        <MovieExplorerButton\r\n          text=\"Search\"\r\n          onClick={handleSearchMovie}\r\n          ariaLabel=\"Search\"\r\n        />\r\n      </StyledForm>\r\n      <MovieExplorerList\r\n        movies={Movies}\r\n        paginate={handleSearchMovie}\r\n        isLoading={isLoading}\r\n        toggle={toggle}\r\n      />\r\n    </StyledSection>\r\n  );\r\n};\r\n\r\nMovieExplorer.displayName = \"MovieExplorer\";\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { MovieExplorer } from \"./pages/MovieExplorer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MovieExplorer />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}