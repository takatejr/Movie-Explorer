{"version":3,"sources":["components/modules/MovieExplorer/MovieExplorerPagination.tsx","components/modules/MovieExplorer/MovieExplorerButton.tsx","components/modules/MovieExplorer/MovieExplorerInput.tsx","components/modules/MovieExplorer/MovieExplorerItem.tsx","utils/const.tsx","utils/FetchData.tsx","pages/MovieExplorer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledButton","styled","button","MovieExplorerPagination","memo","paginate","page","onClick","value","displayName","MovieExplorerButton","text","ariaLabel","aria-label","InputContainer","div","MovieExplorerInput","handleChange","title","htmlFor","type","defaultValue","onChange","placeholder","required","StyledMovie","StyledInfo","StyledTitle","p","StyledYear","MovieExplorerItem","img","year","src","alt","fetchMovies","currentPage","fetch","process","method","mode","then","res","json","Search","undefined","StyledForm","form","StyledSection","section","StyledMovies","StyledPagination","MovieExplorer","useState","setTitle","setPage","pageNumbers","i","push","pages","Poster","Title","Type","Year","imdbID","Movies","setCollectionMovies","getData","useCallback","a","event","Number","parseInt","currentTarget","handleSearchMovie","preventDefault","handleChangeTitle","currentTitle","onSubmit","length","map","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d699637c.chunk.js","sourcesContent":["import { memo, MouseEventHandler } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ntype MovieExplorerPaginationProps = {\r\n  readonly paginate: MouseEventHandler<HTMLButtonElement>;\r\n  readonly page: number;\r\n};\r\n\r\nconst StyledButton = styled.button`\r\n  margin: 0;\r\n  width: 5%;\r\n  color: rgba(40, 40, 40, 0.7);\r\n  margin: 0.1%;\r\n  border: 2px solid rgba(100, 200, 50, 0.7);\r\n  border-radius: 3px;\r\n\r\n  &:active {\r\n    background-color: rgba(100, 200, 50, 0.5);\r\n  }\r\n`;\r\n\r\nexport const MovieExplorerPagination = memo<MovieExplorerPaginationProps>(\r\n  ({ paginate, page }) => {\r\n    return (\r\n      <StyledButton onClick={paginate} value={page}>\r\n        {page}\r\n      </StyledButton>\r\n    );\r\n  },\r\n);\r\n\r\nMovieExplorerPagination.displayName = \"MovieExplorerPagination\";\r\n","import { memo, MouseEventHandler } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ntype ButtonProps = {\r\n  readonly text: string;\r\n  readonly onClick: MouseEventHandler<HTMLButtonElement>;\r\n  readonly ariaLabel: string;\r\n};\r\n\r\nconst StyledButton = styled.button`\r\n  height: 3vh;\r\n  width: 50%;\r\n  color: rgba(40, 40, 40, 0.7);\r\n  margin: 1%;\r\n  border: 2px solid rgba(100, 200, 50, 0.7);\r\n  border-radius: 3px;\r\n\r\n  &:active {\r\n    background-color: rgba(100, 200, 50, 0.5);\r\n  }\r\n`;\r\n\r\nexport const MovieExplorerButton = memo<ButtonProps>(\r\n  ({ text, onClick, ariaLabel }) => {\r\n    return (\r\n      <StyledButton onClick={onClick} aria-label={ariaLabel}>\r\n        {text}\r\n      </StyledButton>\r\n    );\r\n  },\r\n);\r\n\r\nMovieExplorerButton.displayName = \"MovieExplorerButton\";\r\n","import React, { FormEventHandler, memo } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ntype InputProps = {\r\n  readonly handleChange: FormEventHandler<HTMLInputElement>;\r\n  readonly title: string;\r\n  readonly text: string;\r\n};\r\n\r\nconst InputContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 2%;\r\n  padding: 5vh 0 1vh;\r\n\r\n  & > input {\r\n    border: 1px solid rgba(100, 170, 50, 0.7);\r\n    border-radius: 0.25rem;\r\n    background-color: transparent;\r\n    outline: none;\r\n    padding: 2%;\r\n    transition: all 0.2s ease;\r\n    z-index: 500;\r\n  }\r\n  & > label {\r\n    color: #757575;\r\n    font-size: 1.8rem;\r\n    transition: all 0.2s ease;\r\n    margin: 2%;\r\n    z-index: 500;\r\n  }\r\n`;\r\n\r\nexport const MovieExplorerInput = memo<InputProps>(\r\n  ({ handleChange, title, text }) => {\r\n    return (\r\n      <InputContainer>\r\n        <label htmlFor=\"MovieTitle\">Movie Explorer</label>\r\n        <input\r\n          type=\"text\"\r\n          defaultValue={title}\r\n          onChange={handleChange}\r\n          placeholder={text}\r\n          aria-label={text}\r\n          required\r\n        />\r\n      </InputContainer>\r\n    );\r\n  },\r\n);\r\n\r\nMovieExplorerInput.displayName = \"MovieExplorerInput\";\r\n","import { memo } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ntype MovieExplorerItemProps = {\r\n  readonly title: string;\r\n  readonly img: string;\r\n  readonly year: string;\r\n};\r\n\r\nconst StyledMovie = styled.div`\r\n  max-width: 30vw;\r\n  background-color: rgba(200, 200, 100, 0.5);\r\n  border: 1px solid #a1b1c1;\r\n  margin: 3% 1%;\r\n  order: 1;\r\n`;\r\n\r\nconst StyledInfo = styled.div`\r\n  margin: 1%;\r\n`;\r\n\r\nconst StyledTitle = styled.p`\r\n  font-size: 16px;\r\n  border-bottom: 1px solid #114111;\r\n  margin: 1%;\r\n`;\r\n\r\nconst StyledYear = styled.p`\r\n  margin: 1%;\r\n  font-size: 12px;\r\n`;\r\n\r\nexport const MovieExplorerItem = memo<MovieExplorerItemProps>(\r\n  ({ title, img, year }) => {\r\n    return (\r\n      <StyledMovie key={title}>\r\n        <img src={img} alt={title} />\r\n        <StyledInfo>\r\n          <StyledTitle>{title}</StyledTitle>\r\n          <StyledYear>({year})</StyledYear>\r\n        </StyledInfo>\r\n      </StyledMovie>\r\n    );\r\n  },\r\n);\r\n\r\nMovieExplorerItem.displayName = \"MovieExplorerList\";\r\n","export const API_KEY = process.env.REACT_APP_API_KEY;\r\nexport const API_URL = process.env.REACT_APP_API_URL;","import { API_KEY, API_URL } from \"./const\";\r\n\r\nexport const fetchMovies = (title: string, currentPage: number) => {\r\n  return fetch(`${API_URL}?apikey=${API_KEY}&s=${title}&page=${currentPage}`, {\r\n    method: \"GET\",\r\n    mode: \"cors\",\r\n  })\r\n    .then((res) => {\r\n      if (!res) return;\r\n      return res.json();\r\n    })\r\n    .then(({ Search }) => {\r\n      if (Search === undefined) return;\r\n      return Search;\r\n    });\r\n};\r\n\r\nfetchMovies.displayName = \"fetchMovies\";","import React, {\r\n  FormEventHandler,\r\n  MouseEventHandler,\r\n  useCallback,\r\n  useState,\r\n} from \"react\";\r\nimport { MovieExplorerPagination } from \"../components/modules/MovieExplorer/MovieExplorerPagination\";\r\nimport { MovieExplorerButton } from \"../components/modules/MovieExplorer/MovieExplorerButton\";\r\nimport { MovieExplorerInput } from \"../components/modules/MovieExplorer/MovieExplorerInput\";\r\nimport { MovieExplorerItem } from \"../components/modules/MovieExplorer/MovieExplorerItem\";\r\nimport { fetchMovies } from '../utils/FetchData';\r\nimport styled from \"styled-components\";\r\n\r\nexport type Movie = {\r\n  readonly Poster: string;\r\n  readonly Title: string;\r\n  readonly Type: string;\r\n  readonly Year: string;\r\n  readonly imdbID: string;\r\n  readonly Actors?: string;\r\n  readonly Awards?: string;\r\n  readonly BoxOffice?: string;\r\n  readonly Country?: string;\r\n  readonly DVD?: string;\r\n  readonly Director?: string;\r\n  readonly Genre?: string;\r\n  readonly Language?: string;\r\n  readonly Metascore?: string;\r\n  readonly Plot?: string;\r\n  readonly Production?: string;\r\n  readonly Rated?: string;\r\n  readonly Ratings?: [];\r\n  readonly Released?: string;\r\n  readonly Response?: string;\r\n  readonly Runtime?: string;\r\n  readonly Website?: string;\r\n  readonly Writer?: string;\r\n  readonly imdbRating?: string;\r\n  readonly imdbVotes?: string;\r\n};\r\n\r\nconst StyledForm = styled.form`\r\n  height: 30vh;\r\n  width: 60vw;\r\n  margin: auto;\r\n`;\r\n\r\nconst StyledSection = styled.section`\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  height: 100%;\r\n  display: grid;\r\n  margin: auto;\r\n  justify-content: space-around;\r\n`;\r\n\r\nconst StyledMovies = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n`;\r\n\r\nconst StyledPagination = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const MovieExplorer = () => {\r\n  const [title, setTitle] = useState<string>(\"\");\r\n  const [currentPage, setPage] = useState<number>(1);\r\n  const [pages] = useState(() => {\r\n    const pageNumbers = [];\r\n\r\n    for (let i = 1; i <= 100; i++) {\r\n      pageNumbers.push({ page: i });\r\n    }\r\n    \r\n    return pageNumbers;\r\n  });\r\n\r\n  const [Movies, setCollectionMovies] = useState<Movie[]>(() => [\r\n    {\r\n      Poster: \"\",\r\n      Title: \"\",\r\n      Type: \"\",\r\n      Year: \"\",\r\n      imdbID: \"\",\r\n    },\r\n  ]);\r\n\r\n  const getData = useCallback(\r\n    async () => {\r\n     return await fetchMovies(title, currentPage)\r\n           .then((Movies: Movie[]) => {\r\n             if (Movies === undefined) return;\r\n             setCollectionMovies(Movies)\r\n           })}, [currentPage, title]);\r\n\r\n  const paginate = useCallback<MouseEventHandler<HTMLButtonElement | HTMLFormElement>>((event) => {\r\n    const page = Number.parseInt(event.currentTarget.value, 10);\r\n    setPage(() => page);\r\n    getData();\r\n  }, [getData]);\r\n\r\n  const handleSearchMovie = useCallback<FormEventHandler<HTMLButtonElement | HTMLFormElement>>((event) => {\r\n      event.preventDefault();\r\n      getData();\r\n    }, [getData]);\r\n\r\n  const handleChangeTitle = useCallback<FormEventHandler<HTMLInputElement>>(\r\n    (event) => {\r\n      const currentTitle = event.currentTarget.value;\r\n      setTitle(() => currentTitle);\r\n    }, []);\r\n\r\n  return (\r\n    <StyledSection aria-label=\"MovieExplorer\">\r\n      <StyledForm onSubmit={handleSearchMovie}>\r\n        <MovieExplorerInput\r\n          title={title}\r\n          handleChange={handleChangeTitle}\r\n          text=\"Put movie title...\"\r\n        />\r\n        <MovieExplorerButton\r\n          text=\"Search\"\r\n          onClick={handleSearchMovie}\r\n          ariaLabel=\"Search\"\r\n        />\r\n      </StyledForm>\r\n      <StyledMovies>\r\n        {Movies.length !== 1 &&\r\n          Movies.map(({ Title, Poster, Year, imdbID }) => (\r\n            <MovieExplorerItem\r\n              title={Title}\r\n              img={Poster}\r\n              year={Year}\r\n              key={imdbID + Title}\r\n            />\r\n          ))}\r\n      </StyledMovies>\r\n      <StyledPagination>\r\n        {Movies.length !== 1 &&\r\n          pages.map(({ page }) => (\r\n            <MovieExplorerPagination\r\n              page={page}\r\n              paginate={paginate}\r\n              key={page + \"mep\"}\r\n            />\r\n          ))}\r\n      </StyledPagination>\r\n    </StyledSection>\r\n  );\r\n};\r\n\r\nMovieExplorer.displayName = \"MovieExplorer\";","import React from \"react\";\nimport \"./App.css\";\nimport { MovieExplorer } from \"./pages/MovieExplorer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MovieExplorer />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}